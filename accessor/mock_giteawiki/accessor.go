// Code generated by MockGen. DO NOT EDIT.
// Source: stevejefferson.co.uk/trac2gitea/accessor/giteawiki (interfaces: Accessor)

// Package mock_giteawiki is a generated GoMock package.
package mock_giteawiki

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccessor is a mock of Accessor interface
type MockAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockAccessorMockRecorder
}

// MockAccessorMockRecorder is the mock recorder for MockAccessor
type MockAccessorMockRecorder struct {
	mock *MockAccessor
}

// NewMockAccessor creates a new mock instance
func NewMockAccessor(ctrl *gomock.Controller) *MockAccessor {
	mock := &MockAccessor{ctrl: ctrl}
	mock.recorder = &MockAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccessor) EXPECT() *MockAccessorMockRecorder {
	return m.recorder
}

// CopyFile mocks base method
func (m *MockAccessor) CopyFile(arg0, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// CopyFile indicates an expected call of CopyFile
func (mr *MockAccessorMockRecorder) CopyFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockAccessor)(nil).CopyFile), arg0, arg1)
}

// RepoClone mocks base method
func (m *MockAccessor) RepoClone() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RepoClone")
}

// RepoClone indicates an expected call of RepoClone
func (mr *MockAccessorMockRecorder) RepoClone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoClone", reflect.TypeOf((*MockAccessor)(nil).RepoClone))
}

// RepoComplete mocks base method
func (m *MockAccessor) RepoComplete() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RepoComplete")
}

// RepoComplete indicates an expected call of RepoComplete
func (mr *MockAccessorMockRecorder) RepoComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoComplete", reflect.TypeOf((*MockAccessor)(nil).RepoComplete))
}

// RepoStageAndCommit mocks base method
func (m *MockAccessor) RepoStageAndCommit(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RepoStageAndCommit", arg0, arg1, arg2)
}

// RepoStageAndCommit indicates an expected call of RepoStageAndCommit
func (mr *MockAccessorMockRecorder) RepoStageAndCommit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepoStageAndCommit", reflect.TypeOf((*MockAccessor)(nil).RepoStageAndCommit), arg0, arg1, arg2)
}

// TranslatePageName mocks base method
func (m *MockAccessor) TranslatePageName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslatePageName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// TranslatePageName indicates an expected call of TranslatePageName
func (mr *MockAccessorMockRecorder) TranslatePageName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslatePageName", reflect.TypeOf((*MockAccessor)(nil).TranslatePageName), arg0)
}

// WritePage mocks base method
func (m *MockAccessor) WritePage(arg0, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePage", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// WritePage indicates an expected call of WritePage
func (mr *MockAccessorMockRecorder) WritePage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePage", reflect.TypeOf((*MockAccessor)(nil).WritePage), arg0, arg1)
}
